"""
Process test answer use case
"""

from typing import Dict, Any, Optional
from datetime import datetime
from loguru import logger

from src.domain.entities.test_result import TestResult
from src.domain.repositories.test_repository import TestRepository
from src.domain.use_cases.test.test_questions import TestQuestionsService


class ProcessTestAnswerUseCase:
    """Use case –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    
    def __init__(self, test_repository: TestRepository):
        self.test_repository = test_repository
    
    async def execute(
        self, 
        test_data: Dict[str, Any], 
        answer_index: int
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        
        Args:
            test_data: –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            answer_index: –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        """
        try:
            current_question_id = test_data["current_question_id"]
            answers = test_data["answers"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            question = TestQuestionsService.get_question_by_id(current_question_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = TestQuestionsService.validate_answer(current_question_id, answer_index)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            answers[current_question_id] = {
                "answer_index": answer_index,
                "is_correct": is_correct,
                "answered_at": datetime.utcnow()
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            questions = TestQuestionsService.get_test_questions()
            current_index = next(i for i, q in enumerate(questions) if q.id == current_question_id)
            
            if current_index < len(questions) - 1:
                # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
                next_question = questions[current_index + 1]
                test_data["current_question_id"] = next_question.id
                
                return {
                    "is_test_completed": False,
                    "next_question": next_question,
                    "question_number": current_index + 2,
                    "total_questions": len(questions),
                    "test_data": test_data,
                    "current_answer_correct": is_correct,
                    "explanation": question.explanation
                }
            else:
                # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                return await self._complete_test(test_data)
                
        except Exception as e:
            logger.error(f"Error processing test answer: {e}")
            raise
    
    async def _complete_test(self, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            answers = test_data["answers"]
            user_id = test_data["user_id"]
            attempts = test_data["attempts"]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_questions = len(TestQuestionsService.get_test_questions())
            correct_answers = sum(1 for answer in answers.values() if answer["is_correct"])
            score = correct_answers
            passed = score == total_questions
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            test_result = TestResult(
                id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                user_id=user_id,
                score=score,
                total_questions=total_questions,
                attempts=attempts,
                passed=passed,
                answers_json=answers,
                completed_at=datetime.utcnow(),
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.test_repository.create_test_result(test_result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_message = self._get_result_message(test_result)
            
            logger.info(f"Test completed for user {user_id}: score {score}/{total_questions}")
            
            return {
                "is_test_completed": True,
                "test_result": test_result,
                "result_message": result_message,
                "score": score,
                "total_questions": total_questions,
                "percentage": (score / total_questions) * 100
            }
            
        except Exception as e:
            logger.error(f"Error completing test: {e}")
            raise
    
    def _get_result_message(self, test_result: TestResult) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        if test_result.is_excellent:
            if test_result.attempts == 1:
                return "üéâ –ö—Ç–æ —ç—Ç–æ? –ü—Ä–æ—Å—Ç–æ –ö–∏–±–æ—Ä–≥! –ü–æ–º–µ—à–∞–Ω–Ω—ã–π –Ω–∞ –∞–ø—Ç–µ—á–∫–∞—Ö!"
            else:
                return "üéâ –ú—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ç—Ä–∏ —Å–ª–æ–≤–∞!"
        else:
            return "üòî –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã, —Ç–∞–∫ —á—Ç–æ –∞–ø—Ç–µ—á–∫—É –ª—É—á—à–µ [–∫—É–ø–∏—Ç—å]"
