"""
Test handlers
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.domain.entities.user import User
from src.domain.repositories.test_repository import TestRepository
from src.domain.use_cases.test.start_test import StartTestUseCase
from src.domain.use_cases.test.process_test_answer import ProcessTestAnswerUseCase
from src.infrastructure.database.session import get_db_session
from src.infrastructure.database.repositories.test_repository import SQLAlchemyTestRepository
from src.presentation.keyboards.inline import (
    test_question_keyboard,
    back_to_menu_keyboard,
    test_result_keyboard
)
from src.presentation.states import TestStates

router = Router()


@router.callback_query(F.data == "take_test")
async def start_test(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"""
    try:
        await callback.answer()
        
        async with get_db_session() as session:
            test_repository = SQLAlchemyTestRepository(session)
            start_test_uc = StartTestUseCase(test_repository)
            
            test_data = await start_test_uc.execute(user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ FSM
            await state.update_data(**test_data["test_data"])
            await state.set_state(TestStates.waiting_for_answer)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            question = test_data["question"]
            question_number = test_data["question_number"]
            total_questions = test_data["total_questions"]
            attempts = test_data["attempts"]
            
            await callback.message.edit_text(
                f"üß† –¢–µ—Å—Ç –∏–∑ {total_questions} –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                f"–ü–æ–ø—ã—Ç–∫–∞: {attempts}\n"
                f"–í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}\n\n"
                f"‚ùì {question.question}",
                reply_markup=test_question_keyboard(question.options, question.id)
            )
            
            logger.info(f"Test started for user {user.telegram_id}, question {question_number}")
        
    except Exception as e:
        logger.error(f"Error starting test: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("test_answer_"))
async def process_test_answer(callback: CallbackQuery, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: test_answer_questionId_answerIndex
        parts = callback.data.split("_")
        question_id = int(parts[2])
        answer_index = int(parts[3])
        
        async with get_db_session() as session:
            test_repository = SQLAlchemyTestRepository(session)
            process_answer_uc = ProcessTestAnswerUseCase(test_repository)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            test_data = await state.get_data()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            result = await process_answer_uc.execute(test_data, answer_index)
            
            if result["is_test_completed"]:
                # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                await state.set_state(TestStates.test_completed)
                await state.clear()
                
                test_result = result["test_result"]
                score = result["score"]
                total_questions = result["total_questions"]
                percentage = result["percentage"]
                result_message = result["result_message"]
                
                await callback.message.edit_text(
                    f"üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions} ({percentage:.1f}%)\n\n"
                    f"{result_message}\n\n"
                    f"{'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!' if test_result.passed else 'üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –Ω–∞—à–∏ –∞–ø—Ç–µ—á–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π!'}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞ –≤ —à–æ—É '–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –ú–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º'" –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                if test_result.passed:
                    await callback.message.answer(
                        "üé™ –ó–∞—è–≤–∫–∞ –≤ —à–æ—É '–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –ú–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º'",
                        reply_markup=back_to_menu_keyboard()
                    )
                else:
                    await callback.message.answer(
                        "üíä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –Ω–∞—à–∏ –∞–ø—Ç–µ—á–∫–∏!",
                        reply_markup=back_to_menu_keyboard()
                    )
                
                logger.info(f"Test completed for user {user.telegram_id}: {score}/{total_questions}")
                
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                await state.update_data(**result["test_data"])
                
                next_question = result["next_question"]
                question_number = result["question_number"]
                total_questions = result["total_questions"]
                is_correct = result["current_answer_correct"]
                explanation = result["explanation"]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                await callback.message.edit_text(
                    f"{'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if is_correct else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}\n\n"
                    f"üí° {explanation}\n\n"
                    f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
                )
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                await callback.message.answer(
                    f"üß† –í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}\n\n"
                    f"‚ùì {next_question.question}",
                    reply_markup=test_question_keyboard(next_question.options, next_question.id)
                )
                
                logger.info(f"Question {question_number} answered for user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error processing test answer: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "test_knowledge")
async def test_knowledge_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ –∑–Ω–∞–Ω–∏–π"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è!\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ 6 –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–± –∞–ø—Ç–µ—á–∫–∞—Ö!\n\n"
            "–¢–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ:\n"
            "‚Ä¢ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –¥–ª—è –¥–µ—Ç–µ–π\n"
            "‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—Ä–∏–µ–º–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\n"
            "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?",
            reply_markup=back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in test_knowledge_info: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
