"""
Admin handlers
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from loguru import logger

from src.domain.entities.user import User
from src.domain.repositories.user_repository import UserRepository
from src.domain.repositories.payment_repository import PaymentRepository
from src.domain.repositories.test_repository import TestRepository
from src.infrastructure.database.session import get_db_session
from src.infrastructure.database.repositories.user_repository import SQLAlchemyUserRepository
from src.infrastructure.database.repositories.payment_repository import SQLAlchemyPaymentRepository
from src.infrastructure.database.repositories.test_repository import SQLAlchemyTestRepository
from src.presentation.keyboards.inline import back_to_menu_keyboard
from src.utils.helpers import format_price_kopecks, format_user_display_name

router = Router()


def is_admin(user: User, admin_ids: list[int]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user and user.is_admin


@router.message(Command("admin"))
async def admin_command(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/payments - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "/tests - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤\n"
            "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "/block <user_id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unblock <user_id> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        
    except Exception as e:
        logger.error(f"Error in admin command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(Command("stats"))
async def admin_stats(message: Message, user: User):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        async with get_db_session() as session:
            user_repository = SQLAlchemyUserRepository(session)
            payment_repository = SQLAlchemyPaymentRepository(session)
            test_repository = SQLAlchemyTestRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = await user_repository.get_users_count()
            active_users = await user_repository.get_active_users(limit=1000)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            paid_orders = await payment_repository.get_orders_by_status("paid")
            total_revenue = sum(order.amount_kopecks for order in paid_orders)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
            test_stats = await test_repository.get_test_statistics()
            
            await message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}\n\n"
                f"üí≥ –ü–ª–∞—Ç–µ–∂–∏:\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {len(paid_orders)}\n"
                f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_price_kopecks(total_revenue)}\n\n"
                f"üß† –¢–µ—Å—Ç—ã:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {test_stats['total_tests']}\n"
                f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {test_stats['passed_tests']}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {test_stats['pass_rate']:.1f}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {test_stats['avg_score']:.1f}",
                reply_markup=back_to_menu_keyboard()
            )
        
    except Exception as(as e:
        logger.error(f"Error in admin_stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("users"))
async def admin_users(message: Message, user: User):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        async with get_db_session() as session:
            user_repository = SQLAlchemyUserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = await user_repository.get_active_users(limit=20)
            
            users_text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for i, db_user in enumerate(active_users[:10], 1):
                display_name = format_user_display_name(
                    db_user.first_name, 
                    db_user.last_name, 
                    db_user.username
                )
                status = "‚úÖ" if not db_user.is_blocked else "‚ùå"
                users_text += f"{i}. {status} {display_name} (ID: {db_user.telegram_id})\n"
            
            if len(active_users) > 10:
                users_text += f"\n... –∏ –µ—â–µ {len(active_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await message.answer(users_text, reply_markup=back_to_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Error in admin_users: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.message(Command("payments"))
async def admin_payments(message: Message, user: User):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            paid_orders = await payment_repository.get_orders_by_status("paid")
            pending_orders = await payment_repository.get_orders_by_status("pending")
            failed_orders = await payment_repository.get_orders_by_status("failed")
            
            total_revenue = sum(order.amount_kopecks for order in paid_orders)
            
            await message.answer(
                f"üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
                f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {len(paid_orders)}\n"
                f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_orders)}\n"
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_orders)}\n\n"
                f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_price_kopecks(total_revenue)}\n\n"
                f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
                + "\n".join([
                    f"‚Ä¢ {format_price_kopecks(order.amount_kopecks)} - {order.status}"
                    for order in paid_orders[:5]
                ]),
                reply_markup=back_to_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"Error in admin_payments: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")


@router.message(Command("tests"))
async def admin_tests(message: Message, user: User):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        async with get_db_session() as session:
            test_repository = SQLAlchemyTestRepository(session)
            
            test_stats = await test_repository.get_test_statistics()
            
            await message.answer(
                f"üß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤\n\n"
                f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {test_stats['total_tests']}\n"
                f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {test_stats['passed_tests']}\n"
                f"‚Ä¢ –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {test_stats['failed_tests']}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {test_stats['pass_rate']:.1f}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {test_stats['avg_score']:.1f}\n"
                f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {test_stats['unique_users']}\n\n"
                f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–ª–ª–∞–º:\n"
                + "\n".join([
                    f"‚Ä¢ {score} –±–∞–ª–ª–æ–≤: {count} —Ä–∞–∑"
                    for score, count in sorted(test_stats['score_distribution'].items())
                ]),
                reply_markup=back_to_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"Error in admin_tests: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤")


@router.message(Command("block"))
async def admin_block_user(message: Message, user: User):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id>")
            return
        
        try:
            target_user_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        
        async with get_db_session() as session:
            user_repository = SQLAlchemyUserRepository(session)
            
            success = await user_repository.block_user(target_user_id)
            
            if success:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"User {target_user_id} blocked by admin {user.telegram_id}")
            else:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in admin_block_user: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.message(Command("unblock"))
async def admin_unblock_user(message: Message, user: User):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not is_admin(user, []):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
            return
        
        try:
            target_user_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        
        async with get_db_session() as session:
            user_repository = SQLAlchemyUserRepository(session)
            
            success = await user_repository.unblock_user(target_user_id)
            
            if success:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"User {target_user_id} unblocked by admin {user.telegram_id}")
            else:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in admin_unblock_user: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
