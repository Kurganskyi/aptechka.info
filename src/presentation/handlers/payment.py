"""
Payment handlers
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from loguru import logger

from src.domain.entities.user import User
from src.domain.entities.payment import PaymentStatus
from src.domain.repositories.payment_repository import PaymentRepository
from src.domain.use_cases.payment.create_payment import CreatePaymentUseCase
from src.infrastructure.database.session import get_db_session
from src.infrastructure.database.repositories.payment_repository import SQLAlchemyPaymentRepository
from src.presentation.keyboards.inline import payment_keyboard, back_to_menu_keyboard
from src.utils.helpers import format_price_kopecks

router = Router()


@router.callback_query(F.data.startswith("tripwire_"))
async def handle_tripwire_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞ –∏–∑ callback_data
        tripwire_type = callback.data  # tripwire_1byn –∏–ª–∏ tripwire_99byn
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î)
        user = User(
            id=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            telegram_id=callback.from_user.id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            create_payment_uc = CreatePaymentUseCase(payment_repository)
            
            try:
                order = await create_payment_uc.execute(
                    user=user,
                    product_slug=tripwire_type,
                    user_email=None,  # TODO: –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_phone=None   # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                product_name = "–¢—Ä–∏–ø–≤–∞–π–µ—Ä –∑–∞ 1 BYN" if tripwire_type == "tripwire_1byn" else "–¢—Ä–∏–ø–≤–∞–π–µ—Ä –∑–∞ 99 BYN"
                
                await callback.message.edit_text(
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {product_name}\n\n"
                    f"–°—É–º–º–∞: {format_price_kopecks(order.amount_kopecks)}\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞ 24 —á–∞—Å–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    reply_markup=payment_keyboard(order.bepaid_checkout_url, product_name)
                )
                
                logger.info(f"Payment link sent to user {user.telegram_id} for {tripwire_type}")
                
            except Exception as e:
                logger.error(f"Error creating payment: {e}")
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error in handle_tripwire_payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("kit_"))
async def handle_kit_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∞–ø—Ç–µ—á–∫–∏"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏ –∏–∑ callback_data
        kit_type = callback.data  # kit_family, kit_summer, kit_child, kit_vacation
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î)
        user = User(
            id=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            telegram_id=callback.from_user.id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            create_payment_uc = CreatePaymentUseCase(payment_repository)
            
            try:
                order = await create_payment_uc.execute(
                    user=user,
                    product_slug=kit_type,
                    user_email=None,  # TODO: –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_phone=None   # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                product = await payment_repository.get_product_by_slug(kit_type)
                product_name = product.name if product else kit_type
                
                await callback.message.edit_text(
                    f"üí≥ –û–ø–ª–∞—Ç–∞: {product_name}\n\n"
                    f"–°—É–º–º–∞: {format_price_kopecks(order.amount_kopecks)}\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞ 24 —á–∞—Å–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    reply_markup=payment_keyboard(order.bepaid_checkout_url, product_name)
                )
                
                logger.info(f"Payment link sent to user {user.telegram_id} for {kit_type}")
                
            except Exception as e:
                logger.error(f"Error creating payment: {e}")
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error in handle_kit_payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "get_guide")
async def handle_guide_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –≥–∞–π–¥–∞ –∑–∞ 1 —Ä—É–±"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î)
        user = User(
            id=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            telegram_id=callback.from_user.id,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            username=callback.from_user.username,
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            create_payment_uc = CreatePaymentUseCase(payment_repository)
            
            try:
                order = await create_payment_uc.execute(
                    user=user,
                    product_slug="guide_1byn",
                    user_email=None,  # TODO: –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_phone=None   # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                
                await callback.message.edit_text(
                    f"üí≥ –û–ø–ª–∞—Ç–∞: –ì–∞–π–¥ –∑–∞ 1 BYN\n\n"
                    f"–°—É–º–º–∞: {format_price_kopecks(order.amount_kopecks)}\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞ 24 —á–∞—Å–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    reply_markup=payment_keyboard(order.bepaid_checkout_url, "–ì–∞–π–¥ –∑–∞ 1 BYN")
                )
                
                logger.info(f"Payment link sent to user {user.telegram_id} for guide")
                
            except Exception as e:
                logger.error(f"Error creating payment: {e}")
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error in handle_guide_payment: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
