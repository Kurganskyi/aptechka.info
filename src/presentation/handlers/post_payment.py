"""
Post-payment handlers - –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from loguru import logger

from src.domain.entities.user import User
from src.domain.repositories.payment_repository import PaymentRepository
from src.domain.use_cases.payment.deliver_file import DeliverFileUseCase
from src.infrastructure.database.session import get_db_session
from src.infrastructure.database.repositories.payment_repository import SQLAlchemyPaymentRepository
from src.presentation.keyboards.inline import back_to_menu_keyboard

router = Router()


@router.callback_query(F.data == "download_tripwire")
async def download_tripwire(callback: CallbackQuery, user: User):
    """–°–∫–∞—á–∞—Ç—å —Ç—Ä–∏–ø–≤–∞–π–µ—Ä"""
    try:
        await callback.answer()
        
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            deliver_file_uc = DeliverFileUseCase(payment_repository)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_tripwire_1byn = await payment_repository.has_user_product(user.id, "tripwire_1byn")
            has_tripwire_99byn = await payment_repository.has_user_product(user.id, "tripwire_99byn")
            
            if has_tripwire_99byn:
                file_id = await deliver_file_uc.execute(user, "tripwire_99byn")
                product_name = "–¢—Ä–∏–ø–≤–∞–π–µ—Ä –∑–∞ 99 BYN"
            elif has_tripwire_1byn:
                file_id = await deliver_file_uc.execute(user, "tripwire_1byn")
                product_name = "–¢—Ä–∏–ø–≤–∞–π–µ—Ä –∑–∞ 1 BYN"
            else:
                await callback.message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä—É. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ.",
                    reply_markup=back_to_menu_keyboard()
                )
                return
            
            if file_id:
                await callback.message.answer(
                    f"üé• {product_name}\n\n"
                    "–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:",
                    reply_markup=back_to_menu_keyboard()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await callback.message.answer_document(
                    document=file_id,
                    caption=f"‚úÖ {product_name} - –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                )
                
                logger.info(f"Tripwire delivered to user {user.telegram_id}")
            else:
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error downloading tripwire: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "download_guide")
async def download_guide(callback: CallbackQuery, user: User):
    """–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥"""
    try:
        await callback.answer()
        
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            deliver_file_uc = DeliverFileUseCase(payment_repository)
            
            file_id = await deliver_file_uc.execute(user, "guide_1byn")
            
            if file_id:
                await callback.message.answer(
                    "üìñ –ì–∞–π–¥ –∑–∞ 1 BYN\n\n"
                    "–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:",
                    reply_markup=back_to_menu_keyboard()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await callback.message.answer_document(
                    document=file_id,
                    caption="‚úÖ –ì–∞–π–¥ –∑–∞ 1 BYN - –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                )
                
                logger.info(f"Guide delivered to user {user.telegram_id}")
            else:
                await callback.message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–π–¥—É. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error downloading guide: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("download_kit_"))
async def download_kit(callback: CallbackQuery, user: User):
    """–°–∫–∞—á–∞—Ç—å –∞–ø—Ç–µ—á–∫—É"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏
        kit_type = callback.data.replace("download_kit_", "")
        
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            deliver_file_uc = DeliverFileUseCase(payment_repository)
            
            file_id = await deliver_file_uc.execute(user, kit_type)
            
            if file_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                product = await payment_repository.get_product_by_slug(kit_type)
                product_name = product.name if product else kit_type
                
                await callback.message.answer(
                    f"üì¶ {product_name}\n\n"
                    "–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:",
                    reply_markup=back_to_menu_keyboard()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await callback.message.answer_document(
                    document=file_id,
                    caption=f"‚úÖ {product_name} - –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                )
                
                logger.info(f"Kit {kit_type} delivered to user {user.telegram_id}")
            else:
                await callback.message.answer(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {kit_type}. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ.",
                    reply_markup=back_to_menu_keyboard()
                )
        
    except Exception as e:
        logger.error(f"Error downloading kit {kit_type}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "my_purchases")
async def show_my_purchases(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏"""
    try:
        await callback.answer()
        
        async with get_db_session() as session:
            payment_repository = SQLAlchemyPaymentRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_products = await payment_repository.get_user_products(user.id)
            
            if not user_products:
                await callback.message.answer(
                    "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
                    reply_markup=back_to_menu_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            purchases_text = "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:\n\n"
            
            for user_product in user_products:
                product = await payment_repository.get_product_by_slug(
                    f"product_{user_product.product_id}"  # TODO: –ü–æ–ª—É—á–∏—Ç—å slug –ø—Ä–æ–¥—É–∫—Ç–∞
                )
                product_name = product.name if product else f"–ü—Ä–æ–¥—É–∫—Ç {user_product.product_id}"
                
                status = "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω" if user_product.file_delivered else "üì• –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                purchases_text += f"‚Ä¢ {product_name} - {status}\n"
            
            await callback.message.answer(
                purchases_text,
                reply_markup=back_to_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"Error showing purchases: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
