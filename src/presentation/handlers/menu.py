"""
Menu handlers
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from loguru import logger

from src.presentation.keyboards.inline import (
    main_menu_keyboard,
    kits_menu_keyboard,
    about_me_keyboard,
    faq_keyboard,
    back_to_menu_keyboard
)
from src.config.settings import settings

router = Router()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
        has_tripwire = False  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ PaymentRepository
        
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard(has_tripwire=has_tripwire)
        )
        
    except Exception as e:
        logger.error(f"Error in back_to_main_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "view_kits")
async def view_kits(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–ø—Ç–µ—á–µ–∫"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–ø—Ç–µ—á–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏:",
            reply_markup=kits_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in view_kits: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "about_me")
async def about_me(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üë§ –û–±–æ –º–Ω–µ\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–ø—Ç–µ—á–∫–∞–º.\n\n"
            "–ú–æ—è –º–∏—Å—Å–∏—è - –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ª—é–±—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º "
            "—Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞–ø—Ç–µ—á–µ–∫.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=about_me_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in about_me: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "reviews")
async def reviews(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–∑—ã–≤–∞–º"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "‚≠ê –û—Ç–∑—ã–≤—ã\n\n"
            "–ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!",
            reply_markup=back_to_menu_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏
        await callback.message.answer(
            f"üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {settings.reviews_chat_url}",
            reply_markup=back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in reviews: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "faq")
async def faq(callback: CallbackQuery):
    """FAQ"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=faq_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in faq: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "test_knowledge")
async def test_knowledge(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è!\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ 6 –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–± –∞–ø—Ç–µ—á–∫–∞—Ö!",
            reply_markup=back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in test_knowledge: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "take_test")
async def take_test(callback: CallbackQuery):
    """–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ 6 –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–± –∞–ø—Ç–µ—á–∫–∞—Ö!",
            reply_markup=back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in take_test: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
