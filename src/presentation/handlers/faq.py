"""
FAQ handlers
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.domain.entities.user import User
from src.domain.repositories.payment_repository import PaymentRepository
from src.infrastructure.database.session import get_db_session
from src.infrastructure.database.repositories.payment_repository import SQLAlchemyPaymentRepository
from src.presentation.keyboards.inline import (
    faq_response_keyboard,
    back_to_menu_keyboard,
    main_menu_keyboard
)
from src.presentation.states import FAQStates
from src.utils.helpers import is_admin_user
from src.config.settings import settings

router = Router()

# FAQ –æ—Ç–≤–µ—Ç—ã
FAQ_ANSWERS = {
    "faq_where_buy": {
        "answer": "–í –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ª—é–±–æ–π –∞–ø—Ç–µ–∫–µ. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—é. –ï—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–∞–∫–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.",
        "tripwire_check": True
    },
    "faq_relevance": {
        "answer": "–í —Å–ª–µ–¥—É—é—â–µ–º —Å–º–æ–≥—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ –º—ã –Ω–µ –∏—Å—Å–ª–µ–¥—É–µ–º –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–¥–µ—Ä–∂–∫–∏, –ø–æ—ç—Ç–æ–º—É —É –∫–∞–∂–¥–æ–π –∞–ø—Ç–µ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤.",
        "tripwire_check": True
    },
    "faq_price": {
        "answer": "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ø—Ç–µ—á–∫–∏. –ú—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ.",
        "tripwire_check": True
    },
    "faq_looks": {
        "answer": "–ö–∞–∂–¥–∞—è –∞–ø—Ç–µ—á–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é.",
        "tripwire_check": True
    }
}


@router.callback_query(F.data.startswith("faq_"))
async def handle_faq_question(callback: CallbackQuery, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        await callback.answer()
        
        faq_type = callback.data
        
        if faq_type == "faq_custom":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            await state.set_state(FAQStates.waiting_for_question)
            await callback.message.edit_text(
                "‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!",
                reply_markup=back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ FAQ
        if faq_type not in FAQ_ANSWERS:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        faq_data = FAQ_ANSWERS[faq_type]
        answer = faq_data["answer"]
        tripwire_check = faq_data["tripwire_check"]
        
        await callback.message.edit_text(
            f"‚ùì –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}",
            reply_markup=faq_response_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞
        await state.update_data(
            faq_answered=True,
            tripwire_check_required=tripwire_check
        )
        
        logger.info(f"FAQ answered for user {user.telegram_id}: {faq_type}")
        
    except Exception as e:
        logger.error(f"Error handling FAQ question: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "faq_great")
async def faq_great_response(callback: CallbackQuery, state: FSMContext, user: User):
    """–û—Ç–≤–µ—Ç '–û—Ç–ª–∏—á–Ω–æ!' –Ω–∞ FAQ"""
    try:
        await callback.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞
        data = await state.get_data()
        tripwire_check_required = data.get("tripwire_check_required", False)
        
        if tripwire_check_required:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
            async with get_db_session() as session:
                payment_repository = SQLAlchemyPaymentRepository(session)
                has_tripwire = await payment_repository.has_user_product(user.id, "tripwire_1byn")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
            await callback.message.edit_text(
                "üëç –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å!",
                reply_markup=main_menu_keyboard(has_tripwire=not has_tripwire)
            )
        else:
            await callback.message.edit_text(
                "üëç –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å!",
                reply_markup=main_menu_keyboard(has_tripwire=True)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in faq_great_response: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "faq_another")
async def faq_another_question(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=faq_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in faq_another_question: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(FAQStates.waiting_for_question)
async def handle_custom_question(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        question_text = message.text
        
        if not question_text or len(question_text.strip()) < 10:
            await message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ë–î —á–µ—Ä–µ–∑ UserQuestionRepository
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"Custom question from user {user.telegram_id}: {question_text}")
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=back_to_menu_keyboard()
        )
        
        await state.clear()
        
        # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        
    except Exception as e:
        logger.error(f"Error handling custom question: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
