"""
Inline keyboards
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional


def create_inline_keyboard(
    buttons: List[List[dict]], 
    row_width: int = 2
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    Args:
        buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ - dict —Å 'text' –∏ 'callback_data'
        row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
    
    Returns:
        InlineKeyboardMarkup
    """
    keyboard = []
    
    for row in buttons:
        keyboard_row = []
        for button_data in row:
            button = InlineKeyboardButton(
                text=button_data["text"],
                callback_data=button_data["callback_data"]
            )
            keyboard_row.append(button)
        keyboard.append(keyboard_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def main_menu_keyboard(has_tripwire: bool = True) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    if has_tripwire:
        buttons = [
            [
                {"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 BYN", "callback_data": "tripwire_1byn"},
            ],
            [
                {"text": "üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–ø—Ç–µ—á–µ–∫", "callback_data": "view_kits"},
                {"text": "üë§ –û–±–æ –º–Ω–µ", "callback_data": "about_me"},
            ],
            [
                {"text": "‚≠ê –û—Ç–∑—ã–≤—ã", "callback_data": "reviews"},
                {"text": "‚ùì FAQ", "callback_data": "faq"},
            ],
            [
                {"text": "üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è!", "callback_data": "test_knowledge"},
            ]
        ]
    else:
        buttons = [
            [
                {"text": "üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–ø—Ç–µ—á–µ–∫", "callback_data": "view_kits"},
                {"text": "üë§ –û–±–æ –º–Ω–µ", "callback_data": "about_me"},
            ],
            [
                {"text": "‚≠ê –û—Ç–∑—ã–≤—ã", "callback_data": "reviews"},
                {"text": "‚ùì FAQ", "callback_data": "faq"},
            ],
            [
                {"text": "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!", "callback_data": "take_test"},
            ]
        ]
    
    return create_inline_keyboard(buttons)


def kits_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∞–ø—Ç–µ—á–µ–∫"""
    buttons = [
        [
            {"text": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–∞—è –∞–ø—Ç–µ—á–∫–∞ –Ω–∞ –≥–æ–¥", "callback_data": "kit_family"},
            {"text": "üå∏ –õ–µ—Ç–Ω—è—è-–≤–µ—Å–µ–Ω–Ω—è—è", "callback_data": "kit_summer"},
        ],
        [
            {"text": "üë∂ –î–µ—Ç—Å–∫–∞—è", "callback_data": "kit_child"},
            {"text": "‚úàÔ∏è –í –æ—Ç–ø—É—Å–∫", "callback_data": "kit_vacation"},
        ],
        [
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_main"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def about_me_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é '–û–±–æ –º–Ω–µ'"""
    buttons = [
        [
            {"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∑–∞ 1 —Ä—É–±.", "callback_data": "get_guide"},
        ],
        [
            {"text": "üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–ø—Ç–µ—á–µ–∫", "callback_data": "view_kits"},
            {"text": "‚≠ê –û—Ç–∑—ã–≤—ã", "callback_data": "reviews"},
        ],
        [
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_main"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def faq_keyboard() -> InlineKeyboardMarkup:
    """FAQ –º–µ–Ω—é"""
    buttons = [
        [
            {"text": "üè• –ì–¥–µ –∫—É–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?", "callback_data": "faq_where_buy"},
            {"text": "üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∞–ø—Ç–µ—á–µ–∫", "callback_data": "faq_relevance"},
        ],
        [
            {"text": "üí∞ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?", "callback_data": "faq_price"},
            {"text": "üìã –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø—Ç–µ—á–∫–∞?", "callback_data": "faq_looks"},
        ],
        [
            {"text": "‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å", "callback_data": "faq_custom"},
        ],
        [
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_main"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def payment_keyboard(payment_url: str, product_name: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [
            {"text": f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {product_name}", "url": payment_url},
        ],
        [
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_kits"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def faq_response_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ FAQ"""
    buttons = [
        [
            {"text": "üëç –û—Ç–ª–∏—á–Ω–æ!", "callback_data": "faq_great"},
            {"text": "‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "callback_data": "faq_another"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def test_question_keyboard(options: list, question_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    for i, option in enumerate(options):
        buttons.append([
            {"text": f"{chr(65 + i)}) {option}", "callback_data": f"test_answer_{question_id}_{i}"}
        ])
    
    return create_inline_keyboard(buttons)


def test_result_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    buttons = [
        [
            {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"},
            {"text": "üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", "callback_data": "take_test"},
        ]
    ]
    
    return create_inline_keyboard(buttons)


def back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    buttons = [
        [
            {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"},
        ]
    ]
    
    return create_inline_keyboard(buttons)
