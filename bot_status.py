#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import requests
from loguru import logger

async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await asyncpg.connect(
            host='localhost',
            port=5432,
            database='aptechka',
            user='postgres',
            password='postgres'
        )
        
        version = await conn.fetchval('SELECT version()')
        await conn.close()
        
        logger.success(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {version}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        token = "8220071391:AAF3z2o1RC3m6yn6XiCUWX1fNcx9WH0EILA"
        url = f"https://api.telegram.org/bot{token}/getMe"
        
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                bot_info = data['result']
                logger.success(f"‚úÖ –ë–æ—Ç: @{bot_info['username']} - {bot_info['first_name']}")
                return True
        
        logger.error(f"‚ùå –ë–æ—Ç: –û—à–∏–±–∫–∞ API - {response.status_code}")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ë–æ—Ç: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ok = await check_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
    bot_ok = check_bot_token()
    
    if db_ok and bot_ok:
        logger.success("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
        return False

if __name__ == "__main__":
    asyncio.run(main())
